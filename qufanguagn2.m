function [ resultImg ] = qufanguagn2(image1)
%% 加载原始图像
img1=image1(:,:,1);
img2=image1(:,:,2);
img3=image1(:,:,3);

%% 构造高通滤波器
filter1 = fspecial('gaussian', [7 7], 0.2);
filter2 = fspecial('gaussian', [7 7], 1.8);
high_pass = filter1 - filter2;

%% 利用对数变换将入射光和反射光部分分开
log_img1 = log(1.0 + double(img1));
log_img2 = log(1.0 + double(img2));
log_img3 = log(1.0 + double(img3));

%% 将高斯高通滤波器与对数转换后的图像卷积
high_log_part1 = imfilter(log_img1, high_pass, 'symmetric', 'conv');
high_log_part2 = imfilter(log_img2, high_pass, 'symmetric', 'conv');
high_log_part3 = imfilter(log_img3, high_pass, 'symmetric', 'conv');

%% 幂变换回来
high_part1 = exp(high_log_part1) - 1.0;
high_part2 = exp(high_log_part2) - 1.0;
high_part3 = exp(high_log_part3) - 1.0;
minv1 = min(min(high_part1));
maxv1 = max(max(high_part1));
minv2 = min(min(high_part2));
maxv2 = max(max(high_part2));
minv3 = min(min(high_part3));
maxv3 = max(max(high_part3));

%% 显示结果图像
resultImg1 = (high_part1 - minv1) / (maxv1 - minv1);
resultImg2 = (high_part2 - minv2) / (maxv2 - minv2);
resultImg3 = (high_part3 - minv3) / (maxv3 - minv3);
resultImg=zeros(size(image1));
resultImg(:,:,1)=resultImg1;
resultImg(:,:,2)=resultImg2;
resultImg(:,:,3)=resultImg3;
figure, imshow(resultImg);
title('同态滤波结果');