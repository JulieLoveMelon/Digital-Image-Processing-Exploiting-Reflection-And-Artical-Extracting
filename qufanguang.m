function [ img ] = qufanguang(image)
[m n]=size(image);
n=n/3;
img_hsv=rgb2hsv(image);

%% 制作掩模
mask=zeros(size(image));
for i=1:m
    for j=1:n
        if(img_hsv(i,j,3) > 0.9)
            mask(i,j,:)=0;
        else
            mask(i,j,:)=image(i,j,:);
        end
    end
end

%% 
img=double(image);
lambda=10;
a=1;

img_new=img;
for l=1:100 %迭代次数
    lambda
    for i=2:m-1
        for j=2:n-1
            %for 1=1:3
                if mask(i,j,1)==0     %如果当前像素是被污染的像素，则进行处理
                    Un=sqrt((img(i,j,1)-img(i-1,j,1))^2+((img(i-1,j-1,1)-img(i-1,j+1,1))/2)^2);
                    Ue=sqrt((img(i,j,1)-img(i,j+1,1))^2+((img(i-1,j+1,1)-img(i+1,j+1,1))/2)^2);
                    Uw=sqrt((img(i,j,1)-img(i,j-1,1))^2+((img(i-1,j-1,1)-img(i+1,j-1,1))/2)^2);
                    Us=sqrt((img(i,j,1)-img(i+1,j,1))^2+((img(i+1,j-1,1)-img(i+1,j+1,1))/2)^2);

                    Wn=1/sqrt(Un^2+a^2);
                    We=1/sqrt(Ue^2+a^2);
                    Ww=1/sqrt(Uw^2+a^2);
                    Ws=1/sqrt(Us^2+a^2);

                    Hon=Wn/((Wn+We+Ww+Ws)+lambda);
                    Hoe=We/((Wn+We+Ww+Ws)+lambda);
                    How=Ww/((Wn+We+Ww+Ws)+lambda);
                    Hos=Ws/((Wn+We+Ww+Ws)+lambda);

                    Hoo=lambda/((Wn+We+Ww+Ws)+lambda);

                    img_new(i,j,1)=Hon*img(i-1,j,1)+Hoe*img(i,j+1,1)+How*img(i,j-1,1)+Hos*img(i+1,j,1)+Hoo*img(i,j,1);
                end
            
                if mask(i,j,2)==0     %如果当前像素是被污染的像素，则进行处理
                    Un=sqrt((img(i,j,2)-img(i-1,j,2))^2+((img(i-1,j-1,2)-img(i-1,j+1,2))/2)^2);
                    Ue=sqrt((img(i,j,2)-img(i,j+1,2))^2+((img(i-1,j+1,2)-img(i+1,j+1,2))/2)^2);
                    Uw=sqrt((img(i,j,2)-img(i,j-1,2))^2+((img(i-1,j-1,2)-img(i+1,j-1,2))/2)^2);
                    Us=sqrt((img(i,j,2)-img(i+1,j,2))^2+((img(i+1,j-1,2)-img(i+1,j+1,2))/2)^2);

                    Wn=1/sqrt(Un^2+a^2);
                    We=1/sqrt(Ue^2+a^2);
                    Ww=1/sqrt(Uw^2+a^2);
                    Ws=1/sqrt(Us^2+a^2);

                    Hon=Wn/((Wn+We+Ww+Ws)+lambda);
                    Hoe=We/((Wn+We+Ww+Ws)+lambda);
                    How=Ww/((Wn+We+Ww+Ws)+lambda);
                    Hos=Ws/((Wn+We+Ww+Ws)+lambda);

                    Hoo=lambda/((Wn+We+Ww+Ws)+lambda);

                    img_new(i,j,2)=Hon*img(i-1,j,2)+Hoe*img(i,j+1,2)+How*img(i,j-1,2)+Hos*img(i+1,j,2)+Hoo*img(i,j,2);
                end
                if mask(i,j,3)==0     %如果当前像素是被污染的像素，则进行处理
                    Un=sqrt((img(i,j,3)-img(i-1,j,3))^2+((img(i-1,j-1,3)-img(i-1,j+1,3))/2)^2);
                    Ue=sqrt((img(i,j,3)-img(i,j+1,3))^2+((img(i-1,j+1,3)-img(i+1,j+1,3))/2)^2);
                    Uw=sqrt((img(i,j,3)-img(i,j-1,3))^2+((img(i-1,j-1,3)-img(i+1,j-1,3))/2)^2);
                    Us=sqrt((img(i,j,3)-img(i+1,j,3))^2+((img(i+1,j-1,3)-img(i+1,j+1,3))/2)^2);

                    Wn=1/sqrt(Un^2+a^2);
                    We=1/sqrt(Ue^2+a^2);
                    Ww=1/sqrt(Uw^2+a^2);
                    Ws=1/sqrt(Us^2+a^2);

                    Hon=Wn/((Wn+We+Ww+Ws)+lambda);
                    Hoe=We/((Wn+We+Ww+Ws)+lambda);
                    How=Ww/((Wn+We+Ww+Ws)+lambda);
                    Hos=Ws/((Wn+We+Ww+Ws)+lambda);

                    Hoo=lambda/((Wn+We+Ww+Ws)+lambda);

                    img_new(i,j,3)=Hon*img(i-1,j,3)+Hoe*img(i,j+1,3)+How*img(i,j-1,3)+Hos*img(i+1,j,3)+Hoo*img(i,j,3);
                end
                
            %end
        end
    end
    img=img_new;
   
end
figure
imshow(img);

